use std::cmp::max;
use std::fs::File;
use std::io::Write;
use std::path::PathBuf;

const INFO: &str = r#"
/* This file was generated by 'bfc-rs' (https://github.com/ceilingfans/bfc-rs) */
#include <stdio.h>

int main()
{
"#;

pub struct Compiler {
    pub size: u64,
    pub nesting: usize,
    pub tokens: Vec<char>,
    pub file: File,
    pub source: String,
}

impl Compiler {
    pub fn new(source: String, output: PathBuf) -> Self {
        let mut tokens = vec![];
        let mut positive: u64 = 0;
        let mut negative: u64 = 0;
        for c in source.chars() {
            match c {
                ',' | '.' | '+' | '-' | '[' | ']' => {
                    tokens.push(c);
                }
                '<' => {
                    negative += 1;
                    tokens.push(c);
                }
                '>' => {
                    positive += 1;
                    tokens.push(c);
                }
                _ => continue,
            }
        }

        if negative > positive {
            eprintln!("note: the pointer will eventually become negative");
        }

        let file = File::create(output).expect("failed to write file");

        Compiler {
            size: max(positive, negative),
            tokens,
            file,
            source: String::from(INFO),
            nesting: 1,
        }
    }

    fn __init_array(&mut self) {
        self.__append_source(format!("char arr[{}] = {{0}}; char* ptr = arr;", self.size));
    }

    fn __append_source(&mut self, s: impl AsRef<str>) {
        let string = s.as_ref().to_string();
        let fmt_string = format!("{}{}\n", "\t".repeat(self.nesting), string);
        self.source.push_str(fmt_string.as_str());
    }

    fn __write_to_source(&mut self) {
        let tokens = self.tokens.clone();
        for c in tokens {
            match c {
                '+' => {
                    self.__append_source("++*ptr;");
                }
                '-' => {
                    self.__append_source("--*ptr;");
                }
                '<' => {
                    self.__append_source("--ptr;");
                }
                '>' => {
                    self.__append_source("++ptr;");
                }
                '[' => {
                    self.__append_source("while (*ptr)");
                    self.__append_source("{");
                    self.nesting += 1;
                }
                ']' => {
                    self.nesting -= 1;
                    self.__append_source("}");
                }
                ',' => {
                    self.__append_source("*ptr = getchar();");
                }
                '.' => {
                    self.__append_source("putchar(*ptr);");
                }
                _ => {
                    eprintln!("an invalid character made it past the parser: {}", c)
                }
            }
        }
        self.__append_source("}");
    }

    pub fn write_to_c_file(&mut self) {
        self.__init_array();
        self.__write_to_source();
        match self.file.write(self.source.as_bytes()) {
            Ok(_) => {}
            Err(e) => {
                panic!("{}", e)
            }
        }
    }
}
